{"ast":null,"code":"import * as tokenService from \"./tokenService\";\nconst BASE_URL = `${process.env.REACT_APP_BACKEND_SERVER_URL}/api/auth`;\n\nasync function signup(user) {\n  try {\n    const res = await fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify(user)\n    });\n    const json = await res.json();\n\n    if (json.token) {\n      tokenService.setToken(json.token);\n    }\n\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nasync function login(credentials) {\n  try {\n    const res = await fetch(`${BASE_URL}/login`, {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify(credentials)\n    });\n    const json = await res.json();\n\n    if (json.token) {\n      tokenService.setToken(json.token);\n    }\n\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function changePassword(credentials) {\n  try {\n    const res = await fetch(`${BASE_URL}/changePassword`, {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenService.getToken()}`\n      }),\n      body: JSON.stringify(credentials)\n    });\n    const json = await res.json();\n\n    if (json.token) {\n      tokenService.removeToken();\n      tokenService.setToken(json.token);\n    }\n\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport { signup, getUser, logout, login, changePassword };","map":{"version":3,"sources":["/Users/reneeskibinski/code/sei/hackathon/ukraine-front-end/src/services/authService.js"],"names":["tokenService","BASE_URL","process","env","REACT_APP_BACKEND_SERVER_URL","signup","user","res","fetch","method","headers","Headers","body","JSON","stringify","json","token","setToken","err","Error","getUser","getUserFromToken","logout","removeToken","login","credentials","changePassword","Authorization","getToken"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,gBAA9B;AACA,MAAMC,QAAQ,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,4BAA6B,WAA7D;;AAEA,eAAeC,MAAf,CAAsBC,IAAtB,EAA4B;AAC1B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,SAAb,EAAuB;AAC5CQ,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ,CAFmC;AAG5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAHsC,KAAvB,CAAvB;AAKA,UAAMS,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACdhB,MAAAA,YAAY,CAACiB,QAAb,CAAsBF,IAAI,CAACC,KAA3B;AACD;;AACD,QAAID,IAAI,CAACG,GAAT,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACG,GAAf,CAAN;AACD;AACF,GAbD,CAaE,OAAOA,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF;;AAED,SAASE,OAAT,GAAmB;AACjB,SAAOpB,YAAY,CAACqB,gBAAb,EAAP;AACD;;AAED,SAASC,MAAT,GAAkB;AAChBtB,EAAAA,YAAY,CAACuB,WAAb;AACD;;AAED,eAAeC,KAAf,CAAqBC,WAArB,EAAkC;AAChC,MAAI;AACF,UAAMlB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,QAAb,EAAsB;AAC3CQ,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ,CAFkC;AAG3CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,WAAf;AAHqC,KAAtB,CAAvB;AAKA,UAAMV,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACdhB,MAAAA,YAAY,CAACiB,QAAb,CAAsBF,IAAI,CAACC,KAA3B;AACD;;AACD,QAAID,IAAI,CAACG,GAAT,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACG,GAAf,CAAN;AACD;AACF,GAbD,CAaE,OAAOA,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF;;AAED,eAAeQ,cAAf,CAA8BD,WAA9B,EAA2C;AACzC,MAAI;AACF,UAAMlB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,iBAAb,EAA+B;AACpDQ,MAAAA,MAAM,EAAE,MAD4C;AAEpDC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,wBAAgB,kBADG;AAEnBgB,QAAAA,aAAa,EAAG,UAAS3B,YAAY,CAAC4B,QAAb,EAAwB;AAF9B,OAAZ,CAF2C;AAMpDhB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,WAAf;AAN8C,KAA/B,CAAvB;AAQA,UAAMV,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACdhB,MAAAA,YAAY,CAACuB,WAAb;AACAvB,MAAAA,YAAY,CAACiB,QAAb,CAAsBF,IAAI,CAACC,KAA3B;AACD;;AACD,QAAID,IAAI,CAACG,GAAT,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACG,GAAf,CAAN;AACD;AACF,GAjBD,CAiBE,OAAOA,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF;;AAED,SAASb,MAAT,EAAiBe,OAAjB,EAA0BE,MAA1B,EAAkCE,KAAlC,EAAyCE,cAAzC","sourcesContent":["import * as tokenService from \"./tokenService\";\nconst BASE_URL = `${process.env.REACT_APP_BACKEND_SERVER_URL}/api/auth`;\n\nasync function signup(user) {\n  try {\n    const res = await fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(user),\n    });\n    const json = await res.json();\n    if (json.token) {\n      tokenService.setToken(json.token);\n    }\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nasync function login(credentials) {\n  try {\n    const res = await fetch(`${BASE_URL}/login`, {\n      method: \"POST\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(credentials),\n    });\n    const json = await res.json();\n    if (json.token) {\n      tokenService.setToken(json.token);\n    }\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function changePassword(credentials) {\n  try {\n    const res = await fetch(`${BASE_URL}/changePassword`, {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenService.getToken()}`,\n      }),\n      body: JSON.stringify(credentials),\n    });\n    const json = await res.json();\n    if (json.token) {\n      tokenService.removeToken();\n      tokenService.setToken(json.token);\n    }\n    if (json.err) {\n      throw new Error(json.err);\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport { signup, getUser, logout, login, changePassword };\n"]},"metadata":{},"sourceType":"module"}